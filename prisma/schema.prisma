generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgres"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  servers  Server[]
  members  Member[]
  channels Channel[]

  // #P2: Design Management Relations
  streams  Stream[]
  flows    Flow[]
  desktops Desktop[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #D1: Desktop Model for Routing
model Desktop {
  id   String @id @default(uuid())
  name String @default("Desktop")

  // #D2: Default Flow Reference
  activeFlowId String?

  // #D3: Ownership Relation
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // #D4: Metadata
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

// #S1: Stream Container Model
model Stream {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  // #S2: Ownership & Relations
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // #S3: Flow Management
  flows Flow[]

  // #S4: Metadata
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

// #F1: Flow Design System Container
model Flow {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  // #F2: Ownership & Relations  
  streamId  String
  stream    Stream  @relation(fields: [streamId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // #F3: Design System Components
  tokens Token[]
  fonts  Font[]
  assets Asset[]

  // #F4: Metadata
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([streamId])
  @@index([profileId])
}

// #T1: Design Token Management
model Token {
  id          String        @id @default(uuid())
  name        String
  value       String
  category    TokenCategory
  description String?       @db.Text

  // #T2: Flow Relation
  flowId String
  flow   Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([flowId])
}

// #T3: Token Categories
enum TokenCategory {
  COLOR
  SPACING
  SHADOW
  BORDER
  OPACITY
  BLUR
}

// #F5: Font Management
model Font {
  id       String       @id @default(uuid())
  name     String
  url      String       @db.Text
  category FontCategory
  variants String[] // Array of font weights/styles

  // #F6: Flow Relation
  flowId String
  flow   Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([flowId])
}

// #F7: Font Categories
enum FontCategory {
  PRIMARY
  SECONDARY
  MONOSPACE
  DISPLAY
}

// #A1: Asset Management
model Asset {
  id       String        @id @default(uuid())
  name     String
  url      String        @db.Text
  category AssetCategory

  // #A2: Flow Relation
  flowId String
  flow   Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([flowId])
}

// #A3: Asset Categories  
enum AssetCategory {
  WALLPAPER
  ICON
  ILLUSTRATION
  PATTERN
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
